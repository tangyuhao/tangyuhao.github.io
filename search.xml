<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[How Does A Search Engine Work?]]></title>
      <url>%2F2017%2F04%2F04%2FHow-does-a-search-engine-work%2F</url>
      <content type="text"><![CDATA[We use search engine every day, Google get 3 to 5 billions searching queries every day. I will give a brief introduction about how searching engine works. Documents as VectorsWhen we get a list of documents, we need a specific way to define their relations between each other. Using a vector to present a document is a good way.Suppose each document $j$ can be view as a vector of term frequency $tf$ values, then the dimension should be the number of all possible words, For example:You have “documents”, “as”, “vectors” as the whole word space, then a document whose content is: 1documents as vectors vectors vectors will have a vector value of $(1,1,3)$.It is easy to know the most documents are sparse vectors in real world. Then we can also use a vector denotes a query, continue with the assumption above, a query of vectors will have a vector of: $(0,0,1)$ TF $\times$ IDF ModelAmong the universe of words, some words appear in almost every document like “the”, “a”, etc. Some words appear much less like “Rumpelstiltskin”. It is intuitive to give different words distinct weights. Inverse-Document-FrequencyAn easy way to describe the frequency of a word overall is to calculate its reciprocal expression：$$\frac{N}{n_k}$$ N is total number of documents and $n_k$ is the number of documents that contain term $T_k$ We do some further mathematic operation and get the coefficient of term $T_k$: $$ C_{ik} = \log(\frac N{n_k}) $$… Comming soon]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[How to Install Tensorflow]]></title>
      <url>%2F2017%2F04%2F04%2FHow-to-install-Tensorflow%2F</url>
      <content type="text"><![CDATA[Tensorflow is an open source software library for numerical computation using data flow graphs. It was originally developed by researchers and engineers working on the Google Brain Team within Google’s Machine Intelligence research organization for the purposes of conducting machine learning and deep neural networks research, but the system is general enough to be applicable in a wide variety of other domains as well. How to Install TensorflowInstallation for tensorflow is really easy. Based on my experience of installation on my mac, it is far easier than Caffe which is another deep learning framework. EnvironmentThis tutorial is based on: Mac OSX 10.12.1 python 3.6.0 Tensorflow 1.0 release Installation of Python Virtual EnvironmentPython usually has a lot of different versions which is always a headache for beginners, especially you have projects with different dependencies of various versions of python.To solve this problem, I recommend you use python version manager such as virtualenv, pyenv and conda.In this tutorial, I use conda as an example.You can refer to this link for more information: Help Docs for Conda install Anaconda, download it from: Downloads of Anaconda. And install it follow the instructions of this website. This is an GUI version which is more user-friendly. Open your terminal and test if you can use conda: 12$ conda -Vconda 4.2.13 # output create a new virtual environment for Tensorflow 1$ conda create -name &lt;yourenvname&gt; python=3.6 switch to virtual environment you just created 123$ source activate &lt;yourenvname&gt;$ python -V # use it to check the current versionPython 3.6.0 # output Here you have created a new virtual envronment ready for installation of Tensorflow. And you will find the name of python env appears at the beginning of your command line: 1(&lt;yourenvname&gt;) $ # your command Installation of Tensorflow Then you can install tensorflow in your virtual environment with just one command! Suppose the name of this environment is:tensorlfow 1(tensorlfow) $ conda install tensorflow You are all set! You can run python script in your command line to test whether it will work, but I recommend to use spider mentioned in the next section. Note: If you want to exit your virtual environment, you can simply type source deactivate in your terminal. Test Your Tensorflow Open your anaconda, then you will find your virtualenv here: choose tensorflow (you should choose your virtual environment you just created) and then install “spyder” in the panel. Lauch spyder and try to run the script below: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485'''A linear regression learning algorithm example using TensorFlow library.Author: Aymeric DamienProject: https://github.com/aymericdamien/TensorFlow-Examples/'''from __future__ import print_functionimport tensorflow as tfimport numpyimport matplotlib.pyplot as pltrng = numpy.random# Parameterslearning_rate = 0.01training_epochs = 1000display_step = 50# Training Datatrain_X = numpy.asarray([3.3,4.4,5.5,6.71,6.93,4.168,9.779,6.182,7.59,2.167, 7.042,10.791,5.313,7.997,5.654,9.27,3.1])train_Y = numpy.asarray([1.7,2.76,2.09,3.19,1.694,1.573,3.366,2.596,2.53,1.221, 2.827,3.465,1.65,2.904,2.42,2.94,1.3])n_samples = train_X.shape[0]# tf Graph InputX = tf.placeholder("float")Y = tf.placeholder("float")# Set model weightsW = tf.Variable(rng.randn(), name="weight")b = tf.Variable(rng.randn(), name="bias")# Construct a linear modelpred = tf.add(tf.multiply(X, W), b)# Mean squared errorcost = tf.reduce_sum(tf.pow(pred-Y, 2))/(2*n_samples)# Gradient descentoptimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)# Initializing the variablesinit = tf.global_variables_initializer()# Launch the graphwith tf.Session() as sess: sess.run(init) # Fit all training data for epoch in range(training_epochs): for (x, y) in zip(train_X, train_Y): sess.run(optimizer, feed_dict=&#123;X: x, Y: y&#125;) # Display logs per epoch step if (epoch+1) % display_step == 0: c = sess.run(cost, feed_dict=&#123;X: train_X, Y:train_Y&#125;) print("Epoch:", '%04d' % (epoch+1), "cost=", "&#123;:.9f&#125;".format(c), \ "W=", sess.run(W), "b=", sess.run(b)) print("Optimization Finished!") training_cost = sess.run(cost, feed_dict=&#123;X: train_X, Y: train_Y&#125;) print("Training cost=", training_cost, "W=", sess.run(W), "b=", sess.run(b), '\n') # Graphic display plt.plot(train_X, train_Y, 'ro', label='Original data') plt.plot(train_X, sess.run(W) * train_X + sess.run(b), label='Fitted line') plt.legend() plt.show() # Testing example, as requested (Issue #2) test_X = numpy.asarray([6.83, 4.668, 8.9, 7.91, 5.7, 8.7, 3.1, 2.1]) test_Y = numpy.asarray([1.84, 2.273, 3.2, 2.831, 2.92, 3.24, 1.35, 1.03]) print("Testing... (Mean square loss Comparison)") testing_cost = sess.run( tf.reduce_sum(tf.pow(pred - Y, 2)) / (2 * test_X.shape[0]), feed_dict=&#123;X: test_X, Y: test_Y&#125;) # same function as cost above print("Testing cost=", testing_cost) print("Absolute mean square loss difference:", abs( training_cost - testing_cost)) plt.plot(test_X, test_Y, 'bo', label='Testing data') plt.plot(train_X, sess.run(W) * train_X + sess.run(b), label='Fitted line') plt.legend() plt.show() If you can get the result of this linear regression then you are done! Have fun with it!]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Basics of C++]]></title>
      <url>%2F2017%2F04%2F04%2FBasics-of-C%2F</url>
      <content type="text"><![CDATA[Most people who have learnt computer programming know C/C++. As a relative of C, C++ has very similar syntax but more powerful features. This article mainly talks about some different parts of C++ and C with some basic syntax. The Difference of C and C++C is a procedural programming language thus does not support classes and objects while C++ is a combination of procedural and object oriented programming language(OOP). In a word, you can regard C++ as a hybrid language of C.If you are a C fan but did not use C++ in the past, you can simply change you file extension to .cpp and use g++ to compile it. C++ is compatible with C in most cases. 1$ g++ -o &lt;output_name&gt; &lt;sourcefile_name&gt;.cpp Note: .C, .cc, .cpp, .c++, .cp, or .cxx are all C++ source files suffixes; header files have suffixes like: .h, .hpp, .hh. The reason why C++ has so many suffixes is just about conventions. Most commonly used suffixes are .cpp and .hpp. Basic SyntaxIn this part, I only talk about some important syntax which is different from C, if you would like more details please refer to C++ reference documents or textbooks like “C++ primer”. Hello WorldThe hello world C++ file example is: 12345678910#include &lt;iostream&gt; // standard library that provides IOint main()&#123; // std is namespace of C++ standard library // namespace uses '::' as scope operator // cout is to print to standard output // endl is just like '\n' std::cout&lt;&lt;"Hello world!"&lt;&lt;std::endl; return 0;&#125; Note: Namespace is the mechanism for putting names defined by a library into a single place. Namespaces help avoid inadvertent name clashes. The names defined by the C++ library are in the namespace std. ClassIn C++ we use classes to define our own data types. A class defines a type along with a collection of operations that are related to that type. The class mechanism is one of the most important features in C++. In fact, a primary focus of the design of C++ is to make it possible to define class types that behave as naturally as the built-in types. Here is an example of a class of Complex number. 1234567891011121314151617181920212223242526272829303132333435363738394041class Complex &#123; private: float real, imag; public: Complex()&#123; // default constructor real = 0;// real is the member of ComplexNumber imag = 0; &#125; Complex(double real, double imag)&#123; // constructor this-&gt;real = real;// need to use this-&gt; to tell compiler that you mean the member "real" of this object this-&gt;imag = imag; &#125; Complex(const Complex &amp;c)&#123; // this is copy constructor real = c.real; imag = c.imag; &#125; Complex add(const Complex &amp;input1, const Complex &amp;input2); Complex operator+(const Complex &amp;c2)&#123; return Complex(real+c2.real, imag+c2.imag); &#125; bool operator==(const Complex &amp;c2)&#123; if (real == c2.real &amp;&amp; imag == c2.imag) return true; else return false; &#125; void print()&#123; cout&lt;&lt;real&lt;&lt;"+"&lt;&lt;imag&lt;&lt;"j"&lt;&lt;endl; &#125; ~Complex(void)&#123;&#125; // destructor&#125;;Complex Complex::add(const Complex &amp;input1, const Complex &amp;input2)&#123; return Complex(input1.real + input2.real, input1.imag + input2.imag);&#125;int main()&#123; Complex a(1,2); // initialize a to be 1 + 2j a = a + Complex(2,3); // add a by 2 + 3j a.print(); // output: 3 + 5j return 0;&#125; Dynamic Memory AllocationIn C, we usually use malloc, calloc to allocate memory. However, in C++, we have new stead. 12345678910111213141516171819202122232425// *********** C syntax ***********Complex *S2;S2 = (Complex *)malloc(sizeof(Complex));char *s;s = (char *)malloc(sizeof(char)*3);int *p;p = (int *)malloc(sizeof(int));*p = 10;/* initialize a 2D array */int ** ary = (int **)malloc(sizeof(int *) * rowCount);int i;for (i = 0; i &lt; rowCount; ++i) ary[i] = (int *)malloc(sizeof(int) * colCount); // *********** C++ syntax ***********Complex *S2;S2 = new Complex;char *s;s = new char[3];int *p;p = new int(10);// allocate and initialize/* initialize a 2D array */int** ary = new int*[rowCount];for(int i = 0; i &lt; rowCount; ++i) ary[i] = new int[colCount]; Constwe use const to define constant in C++. For example: 123const int M = 20; // constant M is an intconst int *p; // or int const *p, means p is variable, but *p is a constantconst * int p; // p is constant, *p is a variable Function TemplateSay that you want to define a function to sway two variables, you may find writing similar functions for different types annoying. C++ has provided you a new feature called template thus you can write a function once for all types. Here is the example:swapping: 12345678910template &lt;typename SWAP&gt; void swap(SWAP &amp;x, SWAP &amp;y) &#123; SWAP t; t = x; x = y; y = t; &#125;// use this function templateint a = 3, b = 5;swap(a,b);// now a is 5, b is 3 Use C and C++ TogetherIn most cases, you can use C syntax in C++ files, but sometimes you will find some errors. This might be solve by adding: 123extern C &#123;// your C code&#125; Your can refer to this link to find out: In C++ source, what is the effect of extern “C”?]]></content>
    </entry>

    
  
  
</search>
