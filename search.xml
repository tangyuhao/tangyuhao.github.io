<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>How Does A Search Engine Work?</title>
    <url>/2017/04/04/How-does-a-search-engine-work/</url>
    <content><![CDATA[<p>We use search engine every day, Google get 3 to 5 billions searching queries every day. I will give a brief introduction about how searching engine works.<br><a id="more"></a></p>
<h2 id="Documents-as-Vectors"><a href="#Documents-as-Vectors" class="headerlink" title="Documents as Vectors"></a>Documents as Vectors</h2><p>When we get a list of documents, we need a specific way to define their relations between each other. Using a vector to present a document is a good way.<br>Suppose each document $j$ can be view as a vector of term frequency $tf$ values, then the dimension should be the number of all possible words, For example:<br>You have “documents”, “as”, “vectors” as the whole word space, then a document whose content is:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">documents as vectors vectors vectors</span><br></pre></td></tr></table></figure>
<p>will have a vector value of $(1,1,3)$.<br>It is easy to know the most documents are sparse vectors in real world.</p>
<p>Then we can also use a vector denotes a query, continue with the assumption above, a query of <code>vectors</code> will have a vector of: $(0,0,1)$</p>
<h2 id="TF-times-IDF-Model"><a href="#TF-times-IDF-Model" class="headerlink" title="TF $\times$ IDF Model"></a>TF $\times$ IDF Model</h2><p>Among the universe of words, some words appear in almost every document like “the”, “a”, etc. Some words appear much less like “Rumpelstiltskin”. It is intuitive to give different words distinct weights.</p>
<h3 id="Inverse-Document-Frequency"><a href="#Inverse-Document-Frequency" class="headerlink" title="Inverse-Document-Frequency"></a>Inverse-Document-Frequency</h3><p>An easy way to describe the frequency of a word overall is to calculate its reciprocal expression：</p>
<script type="math/tex; mode=display">
\frac{N}{n_k}</script><p> N is total number of documents and $n_k$ is the number of documents that contain term $T_k$<br> We do some further mathematic operation and get the coefficient of term $T_k$:</p>
<script type="math/tex; mode=display">
 C_{ik} = \log(\frac N{n_k})</script><p>… Comming soon</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>search</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Install Tensorflow</title>
    <url>/2017/04/04/How-to-install-Tensorflow/</url>
    <content><![CDATA[<p>Tensorflow is an open source software library for numerical computation using data flow graphs. It was originally developed by researchers and engineers working on the Google Brain Team within Google’s Machine Intelligence research organization for the purposes of conducting machine learning and deep neural networks research, but the system is general enough to be applicable in a wide variety of other domains as well.<br><a id="more"></a></p>
<h2 id="How-to-Install-Tensorflow"><a href="#How-to-Install-Tensorflow" class="headerlink" title="How to Install Tensorflow"></a>How to Install Tensorflow</h2><p>Installation for tensorflow is really easy. Based on my experience of installation on my mac, it is far easier than Caffe which is another deep learning framework.</p>
<h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><p>This tutorial is based on:</p>
<ul>
<li>Mac OSX 10.12.1</li>
<li>python 3.6.0</li>
<li>Tensorflow 1.0 release</li>
</ul>
<h3 id="Installation-of-Python-Virtual-Environment"><a href="#Installation-of-Python-Virtual-Environment" class="headerlink" title="Installation of Python Virtual Environment"></a>Installation of Python Virtual Environment</h3><p>Python usually has a lot of different versions which is always a headache for beginners, especially you have projects with different dependencies of various versions of python.<br>To solve this problem, I recommend you use python version manager such as <code>virtualenv</code>, <code>pyenv</code> and <code>conda</code>.<br>In this tutorial, I use <code>conda</code> as an example.<br>You can refer to this link for more information: <a href="https://conda.io/docs/get-started.html" target="_blank" rel="noopener">Help Docs for Conda</a></p>
<ul>
<li><p>install Anaconda, download it from: <a href="https://www.continuum.io/downloads" target="_blank" rel="noopener">Downloads of Anaconda</a>. And install it follow the instructions of this website. This is an GUI version which is more user-friendly. </p>
</li>
<li><p>Open your terminal and test if you can use conda:</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda -V</span><br><span class="line">conda 4.2.13 <span class="comment"># output</span></span><br></pre></td></tr></table></figure>
<ul>
<li>create a new virtual environment for Tensorflow</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda create -name &lt;yourenvname&gt; python=3.6</span><br></pre></td></tr></table></figure>
<ul>
<li>switch to virtual environment you just created</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> activate &lt;yourenvname&gt;</span><br><span class="line">$ python -V <span class="comment"># use it to check the current version</span></span><br><span class="line">Python 3.6.0 <span class="comment"># output</span></span><br></pre></td></tr></table></figure>
<p>Here you have created a new virtual envronment ready for installation of Tensorflow. And you will find the name of python env appears at the beginning of your command line:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(&lt;yourenvname&gt;) $ <span class="comment"># your command</span></span><br></pre></td></tr></table></figure>
<h3 id="Installation-of-Tensorflow"><a href="#Installation-of-Tensorflow" class="headerlink" title="Installation of Tensorflow"></a>Installation of Tensorflow</h3><ul>
<li>Then you can install tensorflow in your virtual environment with just one command! Suppose the name of this environment is:<code>tensorlfow</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(tensorlfow) $ conda install tensorflow</span><br></pre></td></tr></table></figure>
<ul>
<li>You are all set! You can run python script in your command line to test whether it will work, but I recommend to use spider mentioned in the next section.</li>
</ul>
<p><strong>Note:</strong> If you want to exit your virtual environment, you can simply type <code>source deactivate</code> in your terminal.</p>
<h2 id="Test-Your-Tensorflow"><a href="#Test-Your-Tensorflow" class="headerlink" title="Test Your Tensorflow"></a>Test Your Tensorflow</h2><ul>
<li>Open your anaconda, then you will find your virtualenv here:</li>
</ul>
<p><img src="/images/tensorflow.png" alt="tensorflo"></p>
<p>choose tensorflow (you should choose your virtual environment you just created) and then install “spyder” in the panel.</p>
<ul>
<li>Lauch spyder and try to run the script below:</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">A linear regression learning algorithm example using TensorFlow library.</span></span><br><span class="line"><span class="string">Author: Aymeric Damien</span></span><br><span class="line"><span class="string">Project: https://github.com/aymericdamien/TensorFlow-Examples/</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">rng = numpy.random</span><br><span class="line"></span><br><span class="line"><span class="comment"># Parameters</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">training_epochs = <span class="number">1000</span></span><br><span class="line">display_step = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Training Data</span></span><br><span class="line">train_X = numpy.asarray([<span class="number">3.3</span>,<span class="number">4.4</span>,<span class="number">5.5</span>,<span class="number">6.71</span>,<span class="number">6.93</span>,<span class="number">4.168</span>,<span class="number">9.779</span>,<span class="number">6.182</span>,<span class="number">7.59</span>,<span class="number">2.167</span>,</span><br><span class="line">                         <span class="number">7.042</span>,<span class="number">10.791</span>,<span class="number">5.313</span>,<span class="number">7.997</span>,<span class="number">5.654</span>,<span class="number">9.27</span>,<span class="number">3.1</span>])</span><br><span class="line">train_Y = numpy.asarray([<span class="number">1.7</span>,<span class="number">2.76</span>,<span class="number">2.09</span>,<span class="number">3.19</span>,<span class="number">1.694</span>,<span class="number">1.573</span>,<span class="number">3.366</span>,<span class="number">2.596</span>,<span class="number">2.53</span>,<span class="number">1.221</span>,</span><br><span class="line">                         <span class="number">2.827</span>,<span class="number">3.465</span>,<span class="number">1.65</span>,<span class="number">2.904</span>,<span class="number">2.42</span>,<span class="number">2.94</span>,<span class="number">1.3</span>])</span><br><span class="line">n_samples = train_X.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># tf Graph Input</span></span><br><span class="line">X = tf.placeholder(<span class="string">"float"</span>)</span><br><span class="line">Y = tf.placeholder(<span class="string">"float"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set model weights</span></span><br><span class="line">W = tf.Variable(rng.randn(), name=<span class="string">"weight"</span>)</span><br><span class="line">b = tf.Variable(rng.randn(), name=<span class="string">"bias"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct a linear model</span></span><br><span class="line">pred = tf.add(tf.multiply(X, W), b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mean squared error</span></span><br><span class="line">cost = tf.reduce_sum(tf.pow(pred-Y, <span class="number">2</span>))/(<span class="number">2</span>*n_samples)</span><br><span class="line"><span class="comment"># Gradient descent</span></span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initializing the variables</span></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Launch the graph</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Fit all training data</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(training_epochs):</span><br><span class="line">        <span class="keyword">for</span> (x, y) <span class="keyword">in</span> zip(train_X, train_Y):</span><br><span class="line">            sess.run(optimizer, feed_dict=&#123;X: x, Y: y&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Display logs per epoch step</span></span><br><span class="line">        <span class="keyword">if</span> (epoch+<span class="number">1</span>) % display_step == <span class="number">0</span>:</span><br><span class="line">            c = sess.run(cost, feed_dict=&#123;X: train_X, Y:train_Y&#125;)</span><br><span class="line">            print(<span class="string">"Epoch:"</span>, <span class="string">'%04d'</span> % (epoch+<span class="number">1</span>), <span class="string">"cost="</span>, <span class="string">"&#123;:.9f&#125;"</span>.format(c), \</span><br><span class="line">                <span class="string">"W="</span>, sess.run(W), <span class="string">"b="</span>, sess.run(b))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Optimization Finished!"</span>)</span><br><span class="line">    training_cost = sess.run(cost, feed_dict=&#123;X: train_X, Y: train_Y&#125;)</span><br><span class="line">    print(<span class="string">"Training cost="</span>, training_cost, <span class="string">"W="</span>, sess.run(W), <span class="string">"b="</span>, sess.run(b), <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Graphic display</span></span><br><span class="line">    plt.plot(train_X, train_Y, <span class="string">'ro'</span>, label=<span class="string">'Original data'</span>)</span><br><span class="line">    plt.plot(train_X, sess.run(W) * train_X + sess.run(b), label=<span class="string">'Fitted line'</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Testing example, as requested (Issue #2)</span></span><br><span class="line">    test_X = numpy.asarray([<span class="number">6.83</span>, <span class="number">4.668</span>, <span class="number">8.9</span>, <span class="number">7.91</span>, <span class="number">5.7</span>, <span class="number">8.7</span>, <span class="number">3.1</span>, <span class="number">2.1</span>])</span><br><span class="line">    test_Y = numpy.asarray([<span class="number">1.84</span>, <span class="number">2.273</span>, <span class="number">3.2</span>, <span class="number">2.831</span>, <span class="number">2.92</span>, <span class="number">3.24</span>, <span class="number">1.35</span>, <span class="number">1.03</span>])</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Testing... (Mean square loss Comparison)"</span>)</span><br><span class="line">    testing_cost = sess.run(</span><br><span class="line">        tf.reduce_sum(tf.pow(pred - Y, <span class="number">2</span>)) / (<span class="number">2</span> * test_X.shape[<span class="number">0</span>]),</span><br><span class="line">        feed_dict=&#123;X: test_X, Y: test_Y&#125;)  <span class="comment"># same function as cost above</span></span><br><span class="line">    print(<span class="string">"Testing cost="</span>, testing_cost)</span><br><span class="line">    print(<span class="string">"Absolute mean square loss difference:"</span>, abs(</span><br><span class="line">        training_cost - testing_cost))</span><br><span class="line"></span><br><span class="line">    plt.plot(test_X, test_Y, <span class="string">'bo'</span>, label=<span class="string">'Testing data'</span>)</span><br><span class="line">    plt.plot(train_X, sess.run(W) * train_X + sess.run(b), label=<span class="string">'Fitted line'</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
<ul>
<li>If you can get the result of this linear regression then you are done!</li>
</ul>
<p>Have fun with it!</p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Use Latex to Write Your Blog</title>
    <url>/2020/04/26/How-to-Use-Latex-to-Write-Your-blog/</url>
    <content><![CDATA[<p>To write math equations in my blog pages, I use Latex. Latex is a document preparation system which allows you to write professional-looking technical documents. For example, most of the scientific publications are written with Latex.</p>
<script type="math/tex; mode=display">
Hello, \LaTeX\ world.</script><p>The line above is created by adding a code block below in my markdown file (source files of blog pages):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">Hello, \LaTeX\ world.</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h2><p>You need to install some dependencies to make your hexo project be able to render “LaTex code” correctly in markdown files. For the <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">NexT theme</a> (the theme I use), you can easily find the “math” block and update it to to below:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Default(true) will load mathjax/katex script on demand</span></span><br><span class="line">  <span class="comment"># That is it only render those page who has 'mathjax: true' in Front Matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax/katex srcipt EVERY PAGE.</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">engine:</span> <span class="string">mathjax</span></span><br></pre></td></tr></table></figure>
<p>Besides, you need to make sure you have installed <code>hexo-renderer-kramed</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>
<h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h2><p>Here I list some basic syntax rules, you can find the full document in <a href="https://en.wikibooks.org/wiki/LaTeX" target="_blank" rel="noopener">LaTex Wikibooks</a>.</p>
<h3 id="Escaping-block"><a href="#Escaping-block" class="headerlink" title="Escaping block"></a>Escaping block</h3><p>There are two ways to include $\LaTeX$ code in markdown:</p>
<ol>
<li>use <code>$&lt;latex expression&gt;$</code> to insert $inline$ expression;</li>
<li>use <code>$$&lt;latex expression&gt;$$</code> to insert displayed expression:</li>
</ol>
<script type="math/tex; mode=display">I\ am\ a\ displayed\ expression!</script><h3 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a>Alignment</h3><p>You can use <code>&amp;</code> to align different lines, and <code>\\</code> to add a line break.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\begin &#123;aligned&#125; </span><br><span class="line">A&amp;&#x3D;B \\</span><br><span class="line">&amp;&#x3D;C \\</span><br><span class="line">&amp;&#x3D;D </span><br><span class="line">\end &#123;aligned&#125;</span><br></pre></td></tr></table></figure><br>The rendered result is (note that I dismissed <code>$$</code>):</p>
<script type="math/tex; mode=display">
\begin {aligned}
A&=B \\
&=C \\
&=D 
\end {aligned}</script><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p>Here are some math equations that we often use. </p>
<h4 id="Case-block"><a href="#Case-block" class="headerlink" title="Case block"></a>Case block</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sign(x)&#x3D;</span><br><span class="line">\begin &#123;cases&#125; </span><br><span class="line">+1, &amp; x\geq0 \\</span><br><span class="line">-1, &amp; x&lt;0 </span><br><span class="line">\end &#123;cases&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
sign(x)=
\begin {cases} 
+1, & x\geq0 \\
-1, & x<0 
\end {cases}</script><h4 id="Fraction"><a href="#Fraction" class="headerlink" title="Fraction"></a>Fraction</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\frac&#123;1&#125;&#123;1+e^&#123;-x&#125;&#125;\\</span><br><span class="line"></span><br><span class="line">\begin&#123;aligned&#125;</span><br><span class="line">  x_0+\frac&#123;1&#125;&#123;x_1+\frac&#123;1&#125;&#123;x_2+\frac&#123;1&#125;&#123;x_3+\frac&#123;1&#125;&#123;x_4&#125;&#125;&#125;&#125;</span><br><span class="line">\end&#123;aligned&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">\frac{1}{1+e^{-x}}\\
\begin{aligned}
  x_0+\frac{1}{x_1+\frac{1}{x_2+\frac{1}{x_3+\frac{1}{x_4}}}}
\end{aligned}</script><h4 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\begin&#123;bmatrix&#125; a &amp; b \\ c &amp; c \end&#123;bmatrix&#125;</span><br><span class="line">\begin&#123;vmatrix&#125; x &amp; y \\ z &amp; v \end&#123;vmatrix&#125;</span><br><span class="line">\begin&#123;Bmatrix&#125; x &amp; y \\ z &amp; v \end&#123;Bmatrix&#125;</span><br><span class="line">\begin&#123;pmatrix&#125; x &amp; y \\ z &amp; v \end&#123;pmatrix&#125;</span><br><span class="line">\begin&#123;bmatrix&#125; 0 &amp; \cdots &amp; 0 \\ \vdots &amp; \ddots &amp; \vdots \\ 0 &amp; \cdots &amp; 0 \end&#123;bmatrix&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{bmatrix} a & b \\ c & c \end{bmatrix}
\begin{vmatrix} x & y \\ z & v \end{vmatrix}
\begin{Bmatrix} x & y \\ z & v \end{Bmatrix}
\begin{pmatrix} x & y \\ z & v \end{pmatrix}
\begin{bmatrix} 0 & \cdots & 0 \\ \vdots & \ddots & \vdots \\ 0 & \cdots & 0 \end{bmatrix}</script>]]></content>
      <categories>
        <category>Technical Writing</category>
      </categories>
      <tags>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title>Basics of C++</title>
    <url>/2017/04/04/Basics-of-C/</url>
    <content><![CDATA[<p>Most people who have learnt computer programming know C/C++. As a relative of C, C++ has very similar syntax but more powerful features. This article mainly talks about some different parts of C++ and C with some basic syntax.<br><a id="more"></a></p>
<h2 id="The-Difference-of-C-and-C"><a href="#The-Difference-of-C-and-C" class="headerlink" title="The Difference of C and C++"></a>The Difference of C and C++</h2><p>C is a procedural programming language thus does not support classes and objects while C++ is a combination of procedural and object oriented programming language(OOP). In a word, you can regard C++ as a hybrid language of C.<br>If you are a C fan but did not use C++ in the past, you can simply change you file extension to <code>.cpp</code> and use g++ to compile it. C++ is compatible with C in most cases.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ g++ -o &lt;output_name&gt; &lt;sourcefile_name&gt;.cpp</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong> <code>.C</code>, <code>.cc</code>, <code>.cpp</code>, <code>.c++</code>, <code>.cp</code>, or <code>.cxx</code> are all C++ source files suffixes; header files have suffixes like: <code>.h</code>, <code>.hpp</code>, <code>.hh</code>. The reason why C++ has so many suffixes is just about conventions. Most commonly used suffixes are <code>.cpp</code> and <code>.hpp</code>.</p>
<h2 id="Basic-Syntax"><a href="#Basic-Syntax" class="headerlink" title="Basic Syntax"></a>Basic Syntax</h2><p>In this part, I only talk about some important syntax which is different from C, if you would like more details please refer to C++ reference documents or textbooks like “C++ primer”.</p>
<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>The hello world C++ file example is:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; // standard library that provides IO</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// std is namespace of C++ standard library</span></span><br><span class="line">    <span class="comment">// namespace uses '::' as scope operator</span></span><br><span class="line">    <span class="comment">// cout is to print to standard output</span></span><br><span class="line">    <span class="comment">// endl is just like '\n'</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello world!"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong> Namespace is the mechanism for putting names defined by a library into a single place. Namespaces help avoid inadvertent name clashes. The names defined by the C++ library are in the namespace <code>std</code>.</p>
<h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><p>In C++ we use classes to define our own data types. A class defines a type along with a collection of operations that are related to that type. The class mechanism is one of the most important features in C++. In fact, a primary focus of the design of C++ is to make it possible to define class types that behave as naturally as the built-in types.</p>
<p>Here is an example of a class of Complex number.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">float</span> real, imag;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Complex()&#123; <span class="comment">// default constructor</span></span><br><span class="line">            real = <span class="number">0</span>;<span class="comment">// real is the member of ComplexNumber</span></span><br><span class="line">            imag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Complex(<span class="keyword">double</span> real, <span class="keyword">double</span> imag)&#123; <span class="comment">// constructor</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;real = real;<span class="comment">// need to use this-&gt; to tell compiler that you mean the member "real" of this object</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;imag = imag;</span><br><span class="line">        &#125;</span><br><span class="line">        Complex(<span class="keyword">const</span> Complex &amp;c)&#123; <span class="comment">// this is copy constructor</span></span><br><span class="line">            real = c.real;</span><br><span class="line">            imag = c.imag;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">Complex <span class="title">add</span><span class="params">(<span class="keyword">const</span> Complex &amp;input1, <span class="keyword">const</span> Complex &amp;input2)</span></span>;</span><br><span class="line">        Complex <span class="keyword">operator</span>+(<span class="keyword">const</span> Complex &amp;c2)&#123;</span><br><span class="line">            <span class="keyword">return</span> Complex(real+c2.real, imag+c2.imag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Complex &amp;c2)&#123;</span><br><span class="line">            <span class="keyword">if</span> (real == c2.real &amp;&amp; imag == c2.imag)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;real&lt;&lt;<span class="string">"+"</span>&lt;&lt;imag&lt;&lt;<span class="string">"j"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ~Complex(<span class="keyword">void</span>)&#123;&#125; <span class="comment">// destructor</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Complex <span class="title">Complex::add</span><span class="params">(<span class="keyword">const</span> Complex &amp;input1, <span class="keyword">const</span> Complex &amp;input2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Complex(input1.real + input2.real, input1.imag + input2.imag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">a</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span></span>; <span class="comment">// initialize a to be 1 + 2j</span></span><br><span class="line">    a = a + Complex(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// add a by 2 + 3j</span></span><br><span class="line">    a.print(); <span class="comment">// output: 3 + 5j</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Dynamic-Memory-Allocation"><a href="#Dynamic-Memory-Allocation" class="headerlink" title="Dynamic Memory Allocation"></a>Dynamic Memory Allocation</h3><p>In C, we usually use <code>malloc</code>, <code>calloc</code> to allocate memory. However, in C++, we have <code>new</code> stead.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// *********** C syntax ***********</span></span><br><span class="line">Complex *S2;</span><br><span class="line">S2 = (Complex *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Complex));</span><br><span class="line"><span class="keyword">char</span> *s;</span><br><span class="line">s = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">3</span>);</span><br><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line">p = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">*p = <span class="number">10</span>;</span><br><span class="line"><span class="comment">/* initialize a 2D array */</span></span><br><span class="line"><span class="keyword">int</span> ** ary = (<span class="keyword">int</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span> *) * rowCount);</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; rowCount; ++i)</span><br><span class="line">    ary[i] = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * colCount);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// *********** C++ syntax ***********</span></span><br><span class="line">Complex *S2;</span><br><span class="line">S2 = <span class="keyword">new</span> Complex;</span><br><span class="line"><span class="keyword">char</span> *s;</span><br><span class="line">s = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line">p = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>);<span class="comment">// allocate and initialize</span></span><br><span class="line"><span class="comment">/* initialize a 2D array */</span></span><br><span class="line"><span class="keyword">int</span>** ary = <span class="keyword">new</span> <span class="keyword">int</span>*[rowCount];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rowCount; ++i)</span><br><span class="line">    ary[i] = <span class="keyword">new</span> <span class="keyword">int</span>[colCount];</span><br></pre></td></tr></table></figure>
<h3 id="Const"><a href="#Const" class="headerlink" title="Const"></a>Const</h3><p>we use <code>const</code> to define constant in C++. For example:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">20</span>; <span class="comment">// constant M is an int</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p; <span class="comment">// or int const *p, means p is variable, but *p is a constant</span></span><br><span class="line"><span class="keyword">const</span> * <span class="keyword">int</span> p; <span class="comment">// p is constant, *p is a variable</span></span><br></pre></td></tr></table></figure>
<h3 id="Function-Template"><a href="#Function-Template" class="headerlink" title="Function Template"></a>Function Template</h3><p>Say that you want to define a function to sway two variables, you may find writing similar functions for different types annoying. C++ has provided you a new feature called template thus you can write a function once for all types. Here is the example:<br><strong>swapping:</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> SWAP&gt; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(SWAP &amp;x, SWAP &amp;y)</span> </span>&#123;</span><br><span class="line">    SWAP t;</span><br><span class="line">    t = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = t;&#125;</span><br><span class="line"><span class="comment">// use this function template</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>, b = <span class="number">5</span>;</span><br><span class="line">swap(a,b);</span><br><span class="line"><span class="comment">// now a is 5, b is 3</span></span><br></pre></td></tr></table></figure>
<h2 id="Use-C-and-C-Together"><a href="#Use-C-and-C-Together" class="headerlink" title="Use C and C++ Together"></a>Use C and C++ Together</h2><p>In most cases, you can use C syntax in C++ files, but sometimes you will find some errors. This might be solve by adding:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> C &#123;</span><br><span class="line"><span class="comment">// your C code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Your can refer to this link to find out: <a href="http://stackoverflow.com/questions/1041866/in-c-source-what-is-the-effect-of-extern-c" target="_blank" rel="noopener">In C++ source, what is the effect of extern “C”?</a></p>
]]></content>
      <categories>
        <category>Programming Language</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Programming Language</tag>
      </tags>
  </entry>
  <entry>
    <title>星轨拍摄与后期</title>
    <url>/2020/05/03/%E6%98%9F%E8%BD%A8%E6%8B%8D%E6%91%84%E4%B8%8E%E5%90%8E%E6%9C%9F/</url>
    <content><![CDATA[<p><img src="/images/star-trail/沉船星轨最终.jpg" alt=""></p>
<p>这幅图摄于2019-11-22，也算是我第一次认真地拍摄星轨~当时摄影群里有朋友提出想去拍旧金山沉船星轨，琢磨着自己虽然也拍过几次银河之类的，但是星轨我还是新手中的新手，正好趁着这次机会去学习一下。写这篇博客也是因为想给自己做个笔记，毕竟摄影中很多经验技术很久不碰就很容易忘记的。<br><a id="more"></a><br>之前拍过一次星轨，但是唯一拍过的两张照片惨不忍睹。</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/star-trail/star_track_1.jpg" alt=""></div><div class="group-picture-column" style="width: 50%;"><img src="/images/star-trail/star_track_2.jpg" alt=""></div></div></div></div>
<p>这两张的问题在于：</p>
<ol>
<li>第一张前景全暗，没有层次；另外星轨太密了，主要原因是曝光时间太久以及光圈太大。在知乎上有一篇<a href="https://zhuanlan.zhihu.com/p/42374912" target="_blank" rel="noopener">星空拍摄指南</a>提到了“88原则”， 也就是光圈f/8，感光度iso 800，这样能尽可能的减少画面中的星星又保留最亮的那些；</li>
<li>第二张前景如果是个灯塔感觉会好很多，星星也有点突兀，不过毕竟当晚其实不是来拍星轨的哈哈哈哈。</li>
</ol>
<p>好了话不多说，我来讲一下这副沉船星轨的拍摄流程吧。</p>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="器材"><a href="#器材" class="headerlink" title="器材"></a>器材</h3><p>我使用的器材是 sony A7M3 以及 16-35MM GM 镜头，A7M3 的高感非常不错而 16-35 GM 镜头在16mm端能提供非常大的视野，拍摄这种远近景就会产生较强烈的视觉冲击。三脚架我用的是曼富图MT055CXPRO3脚架和MHXPRO-BHQ6 XPRO的球头，这个脚架其实挺重的所以如果有很长的hiking要走我一般是用旅行脚架，不过这次下车后走3分钟就到了拍摄的地方。它的优点是很稳，拍摄星空尤其是星轨的时候往往需要一个机位放在那里很久，那稳定性就尤为重要啦.</p>
<p>为了防止按快门时的抖动，一般还需要准备快门线，最好是带间隔拍摄的快门线，你也不会想一个多小时每1分钟或30秒按一次吧。。。（当然机内如果有延时间隔拍摄功能就不一定需要了）</p>
<p>然后就是头灯，最好是要有带红光的头灯。一方面红光闪烁常用于求救（如果你去深山老林的话），另一方面红光的亮度远比白光低，在保证照明的前提下也不会让你的眼睛产生太大的负担（在全黑的环境下开很亮的灯瞳孔反应不过来对眼睛不好，另外很亮的光一开一关眼睛需要更久才能适应极黑的星空）。但当时搞笑的是我竟然买成了户外骑行的头灯，这种灯的亮度比正常头灯高好几倍，开了红光都能给队友做照明了哈哈哈。</p>
<h3 id="拍摄地点-amp-时间"><a href="#拍摄地点-amp-时间" class="headerlink" title="拍摄地点&amp;时间"></a>拍摄地点&amp;时间</h3><p>拍摄的地点在Point Reyes Shipwrecks，可以直接在Google Map上搜到这个地方，按导航走就能到一个很小的停车场，从那下车很快就能到达目的地。<br>同时为了能达到图中的效果，我们需要用星空APP看北极星的位置来确定拍摄日期，因为星星是以北极星为中心旋转的。我自己用的是Sky Guide这款APP，App Store上只要2.99美元，非常实惠。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>我们在拍摄过程中发现因为旁边水潭的缘故比较潮湿，在拍摄了一个多小时后镜头上开始出现了雾气，之后的照片就越来越不能看了。后来网上查了下起雾之后除了等它消除真的没有很多办法，因为这是因为温差导致水蒸气遇冷液化凝结到镜头上导致的。也就是说相机的温度比外界空气更低（这里讨论的是镜头外凝结水雾），所以感觉给相机套个保暖罩会有一些用（网上其他人也提到过）。</p>
<p>同样原因，在这种湿度大的环境尽量少或不更换镜头，不然cmos上凝结水汽了话，除了回到干燥室内/车内晾干是很难解决的。</p>
<h2 id="拍摄-后期"><a href="#拍摄-后期" class="headerlink" title="拍摄+后期"></a>拍摄+后期</h2><p>对于星空这类题材的拍摄，往往都是需要前景背景分别曝光的，否则得到的照片就会是只有星空而前景一片死黑、没有层次。期间就需要保证脚架和球头的位置保持不动，否则会给后期拼接带来更大的麻烦。</p>
<p>由于分开拍摄和后期部分的话比较啰嗦且不直观，我就两方面一起讲啦！</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>拍摄前有一些一定要检查：</p>
<ol>
<li>确保相机防抖关闭；</li>
<li>关闭机内降噪；</li>
<li>卸掉相机背带，不然风大会吹动它带动相机晃动；</li>
<li>周围如果有水，确保不会因为涨潮漫到拍摄位置或者把你困住；</li>
<li>最最最重要的是保证存储卡容量足够，电池容量足够，以及设置照片格式是RAW（拍完发现是JPEG的话你就哭吧，后期根本没法调）。</li>
</ol>
<p>另外拍摄时也要保证：</p>
<ol>
<li>如果要开头灯要征得附近摄影师的同意，不然就毁了别人的照片了lol；</li>
<li>不要在脚架附近跑跑跳跳hhh，会导致脚架震动；</li>
</ol>
<p>最后就是要多穿衣服，一般半夜都很冷。</p>
<h3 id="构图-amp-对焦"><a href="#构图-amp-对焦" class="headerlink" title="构图&amp;对焦"></a>构图&amp;对焦</h3><p>在伸手不见五指的情况下相机的自动对焦不能工作并且LCD也不能看出画面的构图，这时候就需要我们使用超高iso最大光圈和较短快门多拍摄几张来确定构图。之后分别在拍摄前景和星空的时候手动对焦直到对象清晰。<br>比如下图就是 ISO 64000, F/2.8, 2s 拍摄的，虽然画质很差但是后期不会用到这张所以没有关系。<br><img src="/images/star-trail/focus.jpg" alt=""></p>
<h3 id="前景"><a href="#前景" class="headerlink" title="前景"></a>前景</h3><p>拍摄前景相对来说快很多，不过它需要用手机灯光补光。大概流程就是低iso曝光20秒-1分钟（其实时间长短很灵活，因为主要光线是手机提供的）左右，期间用手机手电筒均匀在前景上打光2-5秒（看结果而定），注意要均匀，否则照片很假。这里不推荐手电筒也是这个原因，大部分手电筒的亮度很高，效果会非常生硬。这里我大概拍了十几张，从中选了6张做<a href="https://www.zhihu.com/question/31866887" target="_blank" rel="noopener">中间值堆栈降噪</a>来获得低噪点的前景（参数：16mm, ISO 800, F/2.8, 60s）:<br><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/star-trail/front1.jpg" alt=""></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/star-trail/front2.jpg" alt=""></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/star-trail/front3.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/star-trail/front4.jpg" alt=""></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/star-trail/front5.jpg" alt=""></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/images/star-trail/front6.jpg" alt=""></div></div></div></div></p>
<p>然后我们对图片做以下调整：</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/star-trail/adjust1.png" height="500px"></div><div class="group-picture-column" style="width: 50%;"><img src="/images/star-trail/adjust2.png" height="500px"></div></div></div></div>
<p>就能初步得到层次丰富的地景（下图右），可以看到由于6张照片的堆栈，天空中已经隐隐约约出现了星轨了，不过最后他们是会用蒙版擦除的。这里只做了非常简单的对比度，亮度以及鲜艳度的调整，我比较喜欢夜景色调偏紫偏冷，所以把色调往洋红偏了一些使得画面更加生动。</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/images/star-trail/ground-after-stack.jpg" alt=""></div><div class="group-picture-column" style="width: 50%;"><img src="/images/star-trail/ground-after-stack-2.jpg" alt=""></div></div></div></div>
<h3 id="星轨"><a href="#星轨" class="headerlink" title="星轨"></a>星轨</h3><p>星轨部分是非常耗时的，主要是因为这一步拍摄的时候需要拍摄一小时甚至更久，另一方面后期需要大量的CPU计算以及占用会大量的内存。</p>
<h4 id="拍摄"><a href="#拍摄" class="headerlink" title="拍摄"></a>拍摄</h4><p>想获得星轨是需要超长曝光的，一般来说至少连续曝光30分钟以上。如果是使用传统胶片摄影，那么往往直接使用iso100胶片，小光圈，B门超长曝光一次性完成；而在如今的数码摄影时代，这个方案就显出很多的弊端：</p>
<ol>
<li>数码照相机原理是用CMOS/CCD感光元件接受光线并转化成电信号存储的，但如果长时间不间断曝光会产生大量的热噪声，导致照片噪点非常多；</li>
<li>一旦某一刻出现了什么很亮的车灯或者障碍物遮挡，或者参数设置失误，后期是无法拯救的。</li>
</ol>
<p>对于数码相机，解决方案是多张连续拍摄后期堆栈以减少热噪：</p>
<ol>
<li>拍星轨最容易的就是星星过曝，所以要保证每张照片星星曝光正常，这样最后叠加出来的星轨是有颜色的（黄色，蓝色居多）。判断方法是拍摄完之后100%放大，观察星星是否有颜色，有颜色说明没有过曝。你会发现这样的照片非常暗，但只要星星正常就可以。我使用的参数是 ISO 1600, F/2.8, 16s（这里我并没有用到前文说到的“88原则”，主要是我当时并不知道哈哈哈，并且很多博客也没有提到这个方案，所以这个规则也不是必须的，仅仅作参考）；</li>
<li>使用快门线设置比如连续拍摄300张，每隔17s按一下快门，快门时间设置为16s，这样能保证快门线有1秒时间成功触发快门并且证拍摄的星轨不会出现明显的不连续，算下来就一个半小时左右的星轨；</li>
</ol>
<p>剩下时间就呆在一旁玩玩手机啥的，比较无聊，你也不能干什么。拍完之后就得到了几百张如下照片（RAW格式）：</p>
<p><img src="/images/star-trail/long-exposure-single.jpg" alt=""></p>
<p>到此为止，拍摄工作算是结束啦！</p>
<h4 id="后期"><a href="#后期" class="headerlink" title="后期"></a>后期</h4><p>星轨的后期同样是利用堆栈，不过这次我们使用的是“<a href="https://zhuanlan.zhihu.com/p/23355184" target="_blank" rel="noopener">最大值堆栈</a>”，它的原理是把每张图片最亮的像素点作为输出结果。我是直接拿200张照片合成，电脑的32G内存完全被占满，CPU也是高负荷工作，所以这里对电脑配置要求还是蛮高的，否则会很慢。结果如下：</p>
<p><img src="/images/star-trail/sky-after-stack.jpg" alt=""></p>
<p>真的是丑哭了有没有，但是还好我只要天空部分。为了配合地面的颜色，我用Camera Raw做了类似的调色：</p>
<p><img src="/images/star-trail/adjust3.png" alt=""></p>
<p>然后使用PS蒙版擦掉地面部分并且叠放在地景图层上：</p>
<p><img src="/images/star-trail/adjust4.png" alt=""></p>
<p>这样初步调整就完成啦！</p>
<h3 id="总体调整"><a href="#总体调整" class="headerlink" title="总体调整"></a>总体调整</h3><p>调整完之后感觉还是有些平淡，所以我就针对合成后的图片进行了再调色。这里我觉得色彩不够鲜艳，局部的对比度也有调整的空间，所以使用了Nik Collection 插件集合下的 Color Efec Pro做调整：</p>
<ol>
<li>稍微提升了些色温并且提升了鲜艳度；</li>
<li>使用“Contrast Only”调整局部对比度，这个功能比LR/PS自带的对比度调节更加柔和，并且不会破坏原有的色彩层次；</li>
<li>使用古典柔焦对天空进行柔滑，让星轨没有那么突兀；</li>
</ol>
<p>最终结果就是文章开头的那张。<br><img src="/images/star-trail/沉船星轨最终.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Photography</category>
      </categories>
      <tags>
        <tag>星轨</tag>
        <tag>摄影后期</tag>
      </tags>
  </entry>
</search>
