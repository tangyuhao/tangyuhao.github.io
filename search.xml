<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>How Does A Search Engine Work?</title>
    <url>/2017/04/04/How-does-a-search-engine-work/</url>
    <content><![CDATA[<p>We use search engine every day, Google get 3 to 5 billions searching queries every day. I will give a brief introduction about how searching engine works.<br><a id="more"></a></p>
<h2 id="Documents-as-Vectors"><a href="#Documents-as-Vectors" class="headerlink" title="Documents as Vectors"></a>Documents as Vectors</h2><p>When we get a list of documents, we need a specific way to define their relations between each other. Using a vector to present a document is a good way.<br>Suppose each document $j$ can be view as a vector of term frequency $tf$ values, then the dimension should be the number of all possible words, For example:<br>You have “documents”, “as”, “vectors” as the whole word space, then a document whose content is:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">documents as vectors vectors vectors</span><br></pre></td></tr></table></figure>
<p>will have a vector value of $(1,1,3)$.<br>It is easy to know the most documents are sparse vectors in real world.</p>
<p>Then we can also use a vector denotes a query, continue with the assumption above, a query of <code>vectors</code> will have a vector of: $(0,0,1)$</p>
<h2 id="TF-times-IDF-Model"><a href="#TF-times-IDF-Model" class="headerlink" title="TF $\times$ IDF Model"></a>TF $\times$ IDF Model</h2><p>Among the universe of words, some words appear in almost every document like “the”, “a”, etc. Some words appear much less like “Rumpelstiltskin”. It is intuitive to give different words distinct weights.</p>
<h3 id="Inverse-Document-Frequency"><a href="#Inverse-Document-Frequency" class="headerlink" title="Inverse-Document-Frequency"></a>Inverse-Document-Frequency</h3><p>An easy way to describe the frequency of a word overall is to calculate its reciprocal expression：</p>
<script type="math/tex; mode=display">
\frac{N}{n_k}</script><p> N is total number of documents and $n_k$ is the number of documents that contain term $T_k$<br> We do some further mathematic operation and get the coefficient of term $T_k$:</p>
<script type="math/tex; mode=display">
 C_{ik} = \log(\frac N{n_k})</script><p>… Comming soon</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>search</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Install Tensorflow</title>
    <url>/2017/04/04/How-to-install-Tensorflow/</url>
    <content><![CDATA[<p>Tensorflow is an open source software library for numerical computation using data flow graphs. It was originally developed by researchers and engineers working on the Google Brain Team within Google’s Machine Intelligence research organization for the purposes of conducting machine learning and deep neural networks research, but the system is general enough to be applicable in a wide variety of other domains as well.<br><a id="more"></a></p>
<h2 id="How-to-Install-Tensorflow"><a href="#How-to-Install-Tensorflow" class="headerlink" title="How to Install Tensorflow"></a>How to Install Tensorflow</h2><p>Installation for tensorflow is really easy. Based on my experience of installation on my mac, it is far easier than Caffe which is another deep learning framework.</p>
<h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><p>This tutorial is based on:</p>
<ul>
<li>Mac OSX 10.12.1</li>
<li>python 3.6.0</li>
<li>Tensorflow 1.0 release</li>
</ul>
<h3 id="Installation-of-Python-Virtual-Environment"><a href="#Installation-of-Python-Virtual-Environment" class="headerlink" title="Installation of Python Virtual Environment"></a>Installation of Python Virtual Environment</h3><p>Python usually has a lot of different versions which is always a headache for beginners, especially you have projects with different dependencies of various versions of python.<br>To solve this problem, I recommend you use python version manager such as <code>virtualenv</code>, <code>pyenv</code> and <code>conda</code>.<br>In this tutorial, I use <code>conda</code> as an example.<br>You can refer to this link for more information: <a href="https://conda.io/docs/get-started.html" target="_blank" rel="noopener">Help Docs for Conda</a></p>
<ul>
<li><p>install Anaconda, download it from: <a href="https://www.continuum.io/downloads" target="_blank" rel="noopener">Downloads of Anaconda</a>. And install it follow the instructions of this website. This is an GUI version which is more user-friendly. </p>
</li>
<li><p>Open your terminal and test if you can use conda:</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda -V</span><br><span class="line">conda 4.2.13 <span class="comment"># output</span></span><br></pre></td></tr></table></figure>
<ul>
<li>create a new virtual environment for Tensorflow</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda create -name &lt;yourenvname&gt; python=3.6</span><br></pre></td></tr></table></figure>
<ul>
<li>switch to virtual environment you just created</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> activate &lt;yourenvname&gt;</span><br><span class="line">$ python -V <span class="comment"># use it to check the current version</span></span><br><span class="line">Python 3.6.0 <span class="comment"># output</span></span><br></pre></td></tr></table></figure>
<p>Here you have created a new virtual envronment ready for installation of Tensorflow. And you will find the name of python env appears at the beginning of your command line:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(&lt;yourenvname&gt;) $ <span class="comment"># your command</span></span><br></pre></td></tr></table></figure>
<h3 id="Installation-of-Tensorflow"><a href="#Installation-of-Tensorflow" class="headerlink" title="Installation of Tensorflow"></a>Installation of Tensorflow</h3><ul>
<li>Then you can install tensorflow in your virtual environment with just one command! Suppose the name of this environment is:<code>tensorlfow</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(tensorlfow) $ conda install tensorflow</span><br></pre></td></tr></table></figure>
<ul>
<li>You are all set! You can run python script in your command line to test whether it will work, but I recommend to use spider mentioned in the next section.</li>
</ul>
<p><strong>Note:</strong> If you want to exit your virtual environment, you can simply type <code>source deactivate</code> in your terminal.</p>
<h2 id="Test-Your-Tensorflow"><a href="#Test-Your-Tensorflow" class="headerlink" title="Test Your Tensorflow"></a>Test Your Tensorflow</h2><ul>
<li>Open your anaconda, then you will find your virtualenv here:</li>
</ul>
<p><img src="/images/tensorflow.png" alt="tensorflo"></p>
<p>choose tensorflow (you should choose your virtual environment you just created) and then install “spyder” in the panel.</p>
<ul>
<li>Lauch spyder and try to run the script below:</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">A linear regression learning algorithm example using TensorFlow library.</span></span><br><span class="line"><span class="string">Author: Aymeric Damien</span></span><br><span class="line"><span class="string">Project: https://github.com/aymericdamien/TensorFlow-Examples/</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">rng = numpy.random</span><br><span class="line"></span><br><span class="line"><span class="comment"># Parameters</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">training_epochs = <span class="number">1000</span></span><br><span class="line">display_step = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Training Data</span></span><br><span class="line">train_X = numpy.asarray([<span class="number">3.3</span>,<span class="number">4.4</span>,<span class="number">5.5</span>,<span class="number">6.71</span>,<span class="number">6.93</span>,<span class="number">4.168</span>,<span class="number">9.779</span>,<span class="number">6.182</span>,<span class="number">7.59</span>,<span class="number">2.167</span>,</span><br><span class="line">                         <span class="number">7.042</span>,<span class="number">10.791</span>,<span class="number">5.313</span>,<span class="number">7.997</span>,<span class="number">5.654</span>,<span class="number">9.27</span>,<span class="number">3.1</span>])</span><br><span class="line">train_Y = numpy.asarray([<span class="number">1.7</span>,<span class="number">2.76</span>,<span class="number">2.09</span>,<span class="number">3.19</span>,<span class="number">1.694</span>,<span class="number">1.573</span>,<span class="number">3.366</span>,<span class="number">2.596</span>,<span class="number">2.53</span>,<span class="number">1.221</span>,</span><br><span class="line">                         <span class="number">2.827</span>,<span class="number">3.465</span>,<span class="number">1.65</span>,<span class="number">2.904</span>,<span class="number">2.42</span>,<span class="number">2.94</span>,<span class="number">1.3</span>])</span><br><span class="line">n_samples = train_X.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># tf Graph Input</span></span><br><span class="line">X = tf.placeholder(<span class="string">"float"</span>)</span><br><span class="line">Y = tf.placeholder(<span class="string">"float"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set model weights</span></span><br><span class="line">W = tf.Variable(rng.randn(), name=<span class="string">"weight"</span>)</span><br><span class="line">b = tf.Variable(rng.randn(), name=<span class="string">"bias"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct a linear model</span></span><br><span class="line">pred = tf.add(tf.multiply(X, W), b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mean squared error</span></span><br><span class="line">cost = tf.reduce_sum(tf.pow(pred-Y, <span class="number">2</span>))/(<span class="number">2</span>*n_samples)</span><br><span class="line"><span class="comment"># Gradient descent</span></span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initializing the variables</span></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Launch the graph</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Fit all training data</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(training_epochs):</span><br><span class="line">        <span class="keyword">for</span> (x, y) <span class="keyword">in</span> zip(train_X, train_Y):</span><br><span class="line">            sess.run(optimizer, feed_dict=&#123;X: x, Y: y&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Display logs per epoch step</span></span><br><span class="line">        <span class="keyword">if</span> (epoch+<span class="number">1</span>) % display_step == <span class="number">0</span>:</span><br><span class="line">            c = sess.run(cost, feed_dict=&#123;X: train_X, Y:train_Y&#125;)</span><br><span class="line">            print(<span class="string">"Epoch:"</span>, <span class="string">'%04d'</span> % (epoch+<span class="number">1</span>), <span class="string">"cost="</span>, <span class="string">"&#123;:.9f&#125;"</span>.format(c), \</span><br><span class="line">                <span class="string">"W="</span>, sess.run(W), <span class="string">"b="</span>, sess.run(b))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Optimization Finished!"</span>)</span><br><span class="line">    training_cost = sess.run(cost, feed_dict=&#123;X: train_X, Y: train_Y&#125;)</span><br><span class="line">    print(<span class="string">"Training cost="</span>, training_cost, <span class="string">"W="</span>, sess.run(W), <span class="string">"b="</span>, sess.run(b), <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Graphic display</span></span><br><span class="line">    plt.plot(train_X, train_Y, <span class="string">'ro'</span>, label=<span class="string">'Original data'</span>)</span><br><span class="line">    plt.plot(train_X, sess.run(W) * train_X + sess.run(b), label=<span class="string">'Fitted line'</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Testing example, as requested (Issue #2)</span></span><br><span class="line">    test_X = numpy.asarray([<span class="number">6.83</span>, <span class="number">4.668</span>, <span class="number">8.9</span>, <span class="number">7.91</span>, <span class="number">5.7</span>, <span class="number">8.7</span>, <span class="number">3.1</span>, <span class="number">2.1</span>])</span><br><span class="line">    test_Y = numpy.asarray([<span class="number">1.84</span>, <span class="number">2.273</span>, <span class="number">3.2</span>, <span class="number">2.831</span>, <span class="number">2.92</span>, <span class="number">3.24</span>, <span class="number">1.35</span>, <span class="number">1.03</span>])</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Testing... (Mean square loss Comparison)"</span>)</span><br><span class="line">    testing_cost = sess.run(</span><br><span class="line">        tf.reduce_sum(tf.pow(pred - Y, <span class="number">2</span>)) / (<span class="number">2</span> * test_X.shape[<span class="number">0</span>]),</span><br><span class="line">        feed_dict=&#123;X: test_X, Y: test_Y&#125;)  <span class="comment"># same function as cost above</span></span><br><span class="line">    print(<span class="string">"Testing cost="</span>, testing_cost)</span><br><span class="line">    print(<span class="string">"Absolute mean square loss difference:"</span>, abs(</span><br><span class="line">        training_cost - testing_cost))</span><br><span class="line"></span><br><span class="line">    plt.plot(test_X, test_Y, <span class="string">'bo'</span>, label=<span class="string">'Testing data'</span>)</span><br><span class="line">    plt.plot(train_X, sess.run(W) * train_X + sess.run(b), label=<span class="string">'Fitted line'</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
<ul>
<li>If you can get the result of this linear regression then you are done!</li>
</ul>
<p>Have fun with it!</p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Use Latex to Write Your Blog</title>
    <url>/2020/04/26/How-to-Use-Latex-to-Write-Your-blog/</url>
    <content><![CDATA[<p>To write math equations in my blog pages, I use Latex. Latex is a document preparation system which allows you to write professional-looking technical documents. For example, most of the scientific publications are written with Latex.</p>
<script type="math/tex; mode=display">
Hello, \LaTeX\ world.</script><p>The line above is created by adding a code block below in my markdown file (source files of blog pages):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">Hello, \LaTeX\ world.</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h2><p>You need to install some dependencies to make your hexo project be able to render “LaTex code” correctly in markdown files. For the <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">NexT theme</a> (the theme I use), you can easily find the “math” block and update it to to below:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Default(true) will load mathjax/katex script on demand</span></span><br><span class="line">  <span class="comment"># That is it only render those page who has 'mathjax: true' in Front Matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax/katex srcipt EVERY PAGE.</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">engine:</span> <span class="string">mathjax</span></span><br></pre></td></tr></table></figure>
<p>Besides, you need to make sure you have installed <code>hexo-renderer-kramed</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>
<h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h2><p>Here I list some basic syntax rules, you can find the full document in <a href="https://en.wikibooks.org/wiki/LaTeX" target="_blank" rel="noopener">LaTex Wikibooks</a>.</p>
<h3 id="Escaping-block"><a href="#Escaping-block" class="headerlink" title="Escaping block"></a>Escaping block</h3><p>There are two ways to include $\LaTeX$ code in markdown:</p>
<ol>
<li>use <code>$&lt;latex expression&gt;$</code> to insert $inline$ expression;</li>
<li>use <code>$$&lt;latex expression&gt;$$</code> to insert displayed expression:</li>
</ol>
<script type="math/tex; mode=display">I\ am\ a\ displayed\ expression!</script><h3 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a>Alignment</h3><p>You can use <code>&amp;</code> to align different lines, and <code>\\</code> to add a line break.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\begin &#123;aligned&#125; </span><br><span class="line">A&amp;&#x3D;B \\</span><br><span class="line">&amp;&#x3D;C \\</span><br><span class="line">&amp;&#x3D;D </span><br><span class="line">\end &#123;aligned&#125;</span><br></pre></td></tr></table></figure><br>The rendered result is (note that I dismissed <code>$$</code>):</p>
<script type="math/tex; mode=display">
\begin {aligned}
A&=B \\
&=C \\
&=D 
\end {aligned}</script><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p>Here are some math equations that we often use. </p>
<h4 id="Case-block"><a href="#Case-block" class="headerlink" title="Case block"></a>Case block</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sign(x)&#x3D;</span><br><span class="line">\begin &#123;cases&#125; </span><br><span class="line">+1, &amp; x\geq0 \\</span><br><span class="line">-1, &amp; x&lt;0 </span><br><span class="line">\end &#123;cases&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
sign(x)=
\begin {cases} 
+1, & x\geq0 \\
-1, & x<0 
\end {cases}</script><h4 id="Fraction"><a href="#Fraction" class="headerlink" title="Fraction"></a>Fraction</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\frac&#123;1&#125;&#123;1+e^&#123;-x&#125;&#125;\\</span><br><span class="line"></span><br><span class="line">\begin&#123;aligned&#125;</span><br><span class="line">  x_0+\frac&#123;1&#125;&#123;x_1+\frac&#123;1&#125;&#123;x_2+\frac&#123;1&#125;&#123;x_3+\frac&#123;1&#125;&#123;x_4&#125;&#125;&#125;&#125;</span><br><span class="line">\end&#123;aligned&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">\frac{1}{1+e^{-x}}\\
\begin{aligned}
  x_0+\frac{1}{x_1+\frac{1}{x_2+\frac{1}{x_3+\frac{1}{x_4}}}}
\end{aligned}</script><h4 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\begin&#123;bmatrix&#125; a &amp; b \\ c &amp; c \end&#123;bmatrix&#125;</span><br><span class="line">\begin&#123;vmatrix&#125; x &amp; y \\ z &amp; v \end&#123;vmatrix&#125;</span><br><span class="line">\begin&#123;Bmatrix&#125; x &amp; y \\ z &amp; v \end&#123;Bmatrix&#125;</span><br><span class="line">\begin&#123;pmatrix&#125; x &amp; y \\ z &amp; v \end&#123;pmatrix&#125;</span><br><span class="line">\begin&#123;bmatrix&#125; 0 &amp; \cdots &amp; 0 \\ \vdots &amp; \ddots &amp; \vdots \\ 0 &amp; \cdots &amp; 0 \end&#123;bmatrix&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{bmatrix} a & b \\ c & c \end{bmatrix}
\begin{vmatrix} x & y \\ z & v \end{vmatrix}
\begin{Bmatrix} x & y \\ z & v \end{Bmatrix}
\begin{pmatrix} x & y \\ z & v \end{pmatrix}
\begin{bmatrix} 0 & \cdots & 0 \\ \vdots & \ddots & \vdots \\ 0 & \cdots & 0 \end{bmatrix}</script>]]></content>
      <categories>
        <category>Technical Writing</category>
      </categories>
      <tags>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title>Basics of C++</title>
    <url>/2017/04/04/Basics-of-C/</url>
    <content><![CDATA[<p>Most people who have learnt computer programming know C/C++. As a relative of C, C++ has very similar syntax but more powerful features. This article mainly talks about some different parts of C++ and C with some basic syntax.<br><a id="more"></a></p>
<h2 id="The-Difference-of-C-and-C"><a href="#The-Difference-of-C-and-C" class="headerlink" title="The Difference of C and C++"></a>The Difference of C and C++</h2><p>C is a procedural programming language thus does not support classes and objects while C++ is a combination of procedural and object oriented programming language(OOP). In a word, you can regard C++ as a hybrid language of C.<br>If you are a C fan but did not use C++ in the past, you can simply change you file extension to <code>.cpp</code> and use g++ to compile it. C++ is compatible with C in most cases.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ g++ -o &lt;output_name&gt; &lt;sourcefile_name&gt;.cpp</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong> <code>.C</code>, <code>.cc</code>, <code>.cpp</code>, <code>.c++</code>, <code>.cp</code>, or <code>.cxx</code> are all C++ source files suffixes; header files have suffixes like: <code>.h</code>, <code>.hpp</code>, <code>.hh</code>. The reason why C++ has so many suffixes is just about conventions. Most commonly used suffixes are <code>.cpp</code> and <code>.hpp</code>.</p>
<h2 id="Basic-Syntax"><a href="#Basic-Syntax" class="headerlink" title="Basic Syntax"></a>Basic Syntax</h2><p>In this part, I only talk about some important syntax which is different from C, if you would like more details please refer to C++ reference documents or textbooks like “C++ primer”.</p>
<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>The hello world C++ file example is:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; // standard library that provides IO</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// std is namespace of C++ standard library</span></span><br><span class="line">    <span class="comment">// namespace uses '::' as scope operator</span></span><br><span class="line">    <span class="comment">// cout is to print to standard output</span></span><br><span class="line">    <span class="comment">// endl is just like '\n'</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello world!"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong> Namespace is the mechanism for putting names defined by a library into a single place. Namespaces help avoid inadvertent name clashes. The names defined by the C++ library are in the namespace <code>std</code>.</p>
<h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><p>In C++ we use classes to define our own data types. A class defines a type along with a collection of operations that are related to that type. The class mechanism is one of the most important features in C++. In fact, a primary focus of the design of C++ is to make it possible to define class types that behave as naturally as the built-in types.</p>
<p>Here is an example of a class of Complex number.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">float</span> real, imag;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        Complex()&#123; <span class="comment">// default constructor</span></span><br><span class="line">            real = <span class="number">0</span>;<span class="comment">// real is the member of ComplexNumber</span></span><br><span class="line">            imag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Complex(<span class="keyword">double</span> real, <span class="keyword">double</span> imag)&#123; <span class="comment">// constructor</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;real = real;<span class="comment">// need to use this-&gt; to tell compiler that you mean the member "real" of this object</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;imag = imag;</span><br><span class="line">        &#125;</span><br><span class="line">        Complex(<span class="keyword">const</span> Complex &amp;c)&#123; <span class="comment">// this is copy constructor</span></span><br><span class="line">            real = c.real;</span><br><span class="line">            imag = c.imag;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">Complex <span class="title">add</span><span class="params">(<span class="keyword">const</span> Complex &amp;input1, <span class="keyword">const</span> Complex &amp;input2)</span></span>;</span><br><span class="line">        Complex <span class="keyword">operator</span>+(<span class="keyword">const</span> Complex &amp;c2)&#123;</span><br><span class="line">            <span class="keyword">return</span> Complex(real+c2.real, imag+c2.imag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Complex &amp;c2)&#123;</span><br><span class="line">            <span class="keyword">if</span> (real == c2.real &amp;&amp; imag == c2.imag)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;real&lt;&lt;<span class="string">"+"</span>&lt;&lt;imag&lt;&lt;<span class="string">"j"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ~Complex(<span class="keyword">void</span>)&#123;&#125; <span class="comment">// destructor</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Complex <span class="title">Complex::add</span><span class="params">(<span class="keyword">const</span> Complex &amp;input1, <span class="keyword">const</span> Complex &amp;input2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Complex(input1.real + input2.real, input1.imag + input2.imag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">a</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span></span>; <span class="comment">// initialize a to be 1 + 2j</span></span><br><span class="line">    a = a + Complex(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// add a by 2 + 3j</span></span><br><span class="line">    a.print(); <span class="comment">// output: 3 + 5j</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Dynamic-Memory-Allocation"><a href="#Dynamic-Memory-Allocation" class="headerlink" title="Dynamic Memory Allocation"></a>Dynamic Memory Allocation</h3><p>In C, we usually use <code>malloc</code>, <code>calloc</code> to allocate memory. However, in C++, we have <code>new</code> stead.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// *********** C syntax ***********</span></span><br><span class="line">Complex *S2;</span><br><span class="line">S2 = (Complex *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Complex));</span><br><span class="line"><span class="keyword">char</span> *s;</span><br><span class="line">s = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">3</span>);</span><br><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line">p = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">*p = <span class="number">10</span>;</span><br><span class="line"><span class="comment">/* initialize a 2D array */</span></span><br><span class="line"><span class="keyword">int</span> ** ary = (<span class="keyword">int</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span> *) * rowCount);</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; rowCount; ++i)</span><br><span class="line">    ary[i] = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * colCount);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// *********** C++ syntax ***********</span></span><br><span class="line">Complex *S2;</span><br><span class="line">S2 = <span class="keyword">new</span> Complex;</span><br><span class="line"><span class="keyword">char</span> *s;</span><br><span class="line">s = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line">p = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>);<span class="comment">// allocate and initialize</span></span><br><span class="line"><span class="comment">/* initialize a 2D array */</span></span><br><span class="line"><span class="keyword">int</span>** ary = <span class="keyword">new</span> <span class="keyword">int</span>*[rowCount];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rowCount; ++i)</span><br><span class="line">    ary[i] = <span class="keyword">new</span> <span class="keyword">int</span>[colCount];</span><br></pre></td></tr></table></figure>
<h3 id="Const"><a href="#Const" class="headerlink" title="Const"></a>Const</h3><p>we use <code>const</code> to define constant in C++. For example:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">20</span>; <span class="comment">// constant M is an int</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p; <span class="comment">// or int const *p, means p is variable, but *p is a constant</span></span><br><span class="line"><span class="keyword">const</span> * <span class="keyword">int</span> p; <span class="comment">// p is constant, *p is a variable</span></span><br></pre></td></tr></table></figure>
<h3 id="Function-Template"><a href="#Function-Template" class="headerlink" title="Function Template"></a>Function Template</h3><p>Say that you want to define a function to sway two variables, you may find writing similar functions for different types annoying. C++ has provided you a new feature called template thus you can write a function once for all types. Here is the example:<br><strong>swapping:</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> SWAP&gt; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(SWAP &amp;x, SWAP &amp;y)</span> </span>&#123;</span><br><span class="line">    SWAP t;</span><br><span class="line">    t = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = t;&#125;</span><br><span class="line"><span class="comment">// use this function template</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>, b = <span class="number">5</span>;</span><br><span class="line">swap(a,b);</span><br><span class="line"><span class="comment">// now a is 5, b is 3</span></span><br></pre></td></tr></table></figure>
<h2 id="Use-C-and-C-Together"><a href="#Use-C-and-C-Together" class="headerlink" title="Use C and C++ Together"></a>Use C and C++ Together</h2><p>In most cases, you can use C syntax in C++ files, but sometimes you will find some errors. This might be solve by adding:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> C &#123;</span><br><span class="line"><span class="comment">// your C code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Your can refer to this link to find out: <a href="http://stackoverflow.com/questions/1041866/in-c-source-what-is-the-effect-of-extern-c" target="_blank" rel="noopener">In C++ source, what is the effect of extern “C”?</a></p>
]]></content>
      <categories>
        <category>Programming Language</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Programming Language</tag>
      </tags>
  </entry>
</search>
